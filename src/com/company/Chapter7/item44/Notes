

覆寫removeEldestEntry, 保存最近100個
protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {

   return size() > 100;

}

不推薦此用法, 不應該宣告一個新的介面
// Unnecessary functional interface; use a standard one instead.
@FunctionalInterface interface EldestEntryRemovalFunction<K,V>{
    boolean remove(Map<K,V> map, Map.Entry<K,V> eldest);
}

 The Operator interfaces represent functions whose result and argument types are the same.
 The Predicate interface represents a function that takes an argument and returns a boolean.
 The Function interface represents a function whose argument and return types differ.
 The Supplier interface represents a function that takes no arguments and returns (or “supplies”) a value.
 The Consumer represents a function that takes an argument and returns nothing, essentially consuming its argument.

 The six basic functional interfaces:
-----------------------------------------------------------------------------
| Interface              | Function Signature      | Example                |
-----------------------------------------------------------------------------
| UnaryOperator<T>       | T apply(T t)            | String::toLowerCase    |

| BinaryOperator<T>      | T apply(T t1, T t2)     | BigInteger::add        |

| Predicate<T>           | boolean test(T t)       | Collection::isEmpty    |

| Function<T,R>          | R apply(T t)            | Arrays::asList         |

| Supplier<T>            | T get()                 | Instant::now           |

| Consumer<T>            | void accept(T t)        | System.out::println    |
-----------------------------------------------------------------------------

@TODO: 中間一大段介紹43種差異

Don’t be tempted to use basic functional interfaces with boxed primitives instead of primitive functional interfaces.
Item 61, “prefer primitive types to boxed primitives.”

In summary, now that Java has lambdas, it is imperative that you design your APIs with lambdas in mind.
Accept functional interface types on input and return them on output.
It is generally best to use the standard interfaces provided in java.util.function.Function,
but keep your eyes open for the relatively rare cases where you would be better off writing your own functional interface.